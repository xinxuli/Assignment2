/* tslint:disable */
/* eslint-disable */
/**
 * Assignment2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NickNameResp,
  UserLoginPost200Response,
  UserLoginReq,
} from '../models/index';
import {
    NickNameRespFromJSON,
    NickNameRespToJSON,
    UserLoginPost200ResponseFromJSON,
    UserLoginPost200ResponseToJSON,
    UserLoginReqFromJSON,
    UserLoginReqToJSON,
} from '../models/index';

export interface UserInfoGetRequest {
    authorization?: string;
}

export interface UserLoginPostRequest {
    userLoginReq?: UserLoginReq;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 
     * Get nickname
     */
    async userInfoGetRaw(requestParameters: UserInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NickNameResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/user/info`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NickNameRespFromJSON(jsonValue));
    }

    /**
     * 
     * Get nickname
     */
    async userInfoGet(requestParameters: UserInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NickNameResp> {
        const response = await this.userInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * User login
     */
    async userLoginPostRaw(requestParameters: UserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginReqToJSON(requestParameters['userLoginReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * User login
     */
    async userLoginPost(requestParameters: UserLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginPost200Response> {
        const response = await this.userLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
